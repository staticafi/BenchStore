// <auto-generated />
using System;
using BenchStoreDAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BenchStoreDAL.Migrations
{
    [DbContext(typeof(BenchStoreContext))]
    [Migration("20240911063624_ResultSubdirectoryStoring")]
    partial class ResultSubdirectoryStoring
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BenchStoreDAL.Entities.Label", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Label");
                });

            modelBuilder.Entity("BenchStoreDAL.Entities.Result", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("BenchmarkName")
                        .HasColumnType("text");

                    b.Property<string>("Block")
                        .HasColumnType("text");

                    b.Property<long>("CPUCores")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<string>("Generator")
                        .HasColumnType("text");

                    b.Property<long>("MemLimit")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Options")
                        .HasColumnType("text");

                    b.Property<int>("ResultEntryID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("TimeLimit")
                        .HasColumnType("bigint");

                    b.Property<string>("Tool")
                        .HasColumnType("text");

                    b.Property<string>("ToolModule")
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ResultEntryID")
                        .IsUnique();

                    b.ToTable("Result");
                });

            modelBuilder.Entity("BenchStoreDAL.Entities.ResultEntry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastAccessTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogFilesName")
                        .HasColumnType("text");

                    b.Property<string>("OwnerName")
                        .HasColumnType("text");

                    b.Property<string>("ResultFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResultSubdirectoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("ResultEntry");
                });

            modelBuilder.Entity("LabelResultEntry", b =>
                {
                    b.Property<int>("LabelsID")
                        .HasColumnType("integer");

                    b.Property<int>("ResultEntriesID")
                        .HasColumnType("integer");

                    b.HasKey("LabelsID", "ResultEntriesID");

                    b.HasIndex("ResultEntriesID");

                    b.ToTable("LabelResultEntry");
                });

            modelBuilder.Entity("BenchStoreDAL.Entities.Result", b =>
                {
                    b.HasOne("BenchStoreDAL.Entities.ResultEntry", "ResultEntry")
                        .WithOne("Result")
                        .HasForeignKey("BenchStoreDAL.Entities.Result", "ResultEntryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResultEntry");
                });

            modelBuilder.Entity("LabelResultEntry", b =>
                {
                    b.HasOne("BenchStoreDAL.Entities.Label", null)
                        .WithMany()
                        .HasForeignKey("LabelsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BenchStoreDAL.Entities.ResultEntry", null)
                        .WithMany()
                        .HasForeignKey("ResultEntriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BenchStoreDAL.Entities.ResultEntry", b =>
                {
                    b.Navigation("Result");
                });
#pragma warning restore 612, 618
        }
    }
}
